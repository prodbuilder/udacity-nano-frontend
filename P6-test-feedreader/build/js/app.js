function init(){loadFeed(0)}function loadFeed(e,n){var t=allFeeds[e].url,a=allFeeds[e].name;$.ajax({type:"POST",url:"https://rsstojson.udacity.com/parseFeed",data:JSON.stringify({url:t}),contentType:"application/json",success:function(e,t){var d=$(".feed"),l=$(".header-title"),o=e.feed.entries,i=(o.length,Handlebars.compile($(".tpl-entry").html()));l.html(a),d.empty(),o.forEach(function(e){d.append(i(e))}),n&&n()},error:function(e,t,a){n&&n()},dataType:"json"})}var allFeeds=[{name:"Udacity Blog",url:"http://blog.udacity.com/feed"},{name:"CSS Tricks",url:"http://css-tricks.com/feed"},{name:"HTML5 Rocks",url:"http://feeds.feedburner.com/html5rocks"},{name:"Linear Digressions",url:"http://feeds.feedburner.com/udacity-linear-digressions"}];google.load("feeds","1"),google.setOnLoadCallback(init),$(function(){var e=($(".feed"),$(".feed-list")),n=Handlebars.compile($(".tpl-feed-list-item").html()),t=0,a=$(".menu-icon-link");allFeeds.forEach(function(a){a.id=t,e.append(n(a)),t++}),e.on("click","a",function(){var e=$(this);return $("body").addClass("menu-hidden"),loadFeed(e.data("id")),!1}),a.on("click",function(){$("body").toggleClass("menu-hidden")})}());
//# sourceMappingURL=data:application/json;base64,
